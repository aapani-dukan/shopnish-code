// src/guards/AuthRedirectGuard.tsx

import { useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useLocation } from "wouter";

// ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§•‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä
const PUBLIC_PATHS = [
  "/",
  "/product/", 
  "/cart",
  "/checkout",
];

// ‡§≤‡•â‡§ó‡§ø‡§®/Firebase handler ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§™‡•á‡§∂‡§≤ ‡§ë‡§• ‡§™‡§æ‡§•
const AUTH_SPECIFIC_PATHS = [
  "/auth",
  "/login", 
  "/admin-login", 
  "/__/auth/handler", // Firebase Auth handler path, if used
];

export function AuthRedirectGuard() {
  const [location, navigate] = useLocation();
  const intent = localStorage.getItem('redirectIntent'); 
  const { user, isLoadingAuth, isAuthenticated } = useAuth(); // isAuthenticated ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§Ö‡§¨ become-seller ‡§´‡§º‡•ç‡§≤‡•ã ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§ó‡§æ

  useEffect(() => {
    console.group("AuthRedirectGuard Log");
    console.log("AuthRedirectGuard useEffect triggered.");
    console.log("isLoadingAuth:", isLoadingAuth);
    console.log("isAuthenticated:", isAuthenticated); // ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§π‡•Ä‡§Ç
    console.log("Current user (UUID):", user?.uuid || "null");
    console.log("Current location:", location);
    console.log("Intent from localStorage:", intent);

    // Step 1: ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§§‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç
    if (isLoadingAuth) {
      console.log("AuthRedirectGuard: Still loading auth, returning.");
      console.groupEnd();
      return;
    }

    // ‡§ï‡•Å‡§õ ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§∏
    const isOnPublicPath = PUBLIC_PATHS.some(
      (path) => location === path || (path.endsWith("/") && location.startsWith(path)) || (!path.endsWith("/") && location.startsWith(path + '/'))
    );
    const isOnAuthSpecificPath = AUTH_SPECIFIC_PATHS.some(
      (path) => location === path || location.startsWith(path + '/') || location.includes(path)
    );

    // --- ‚úÖ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ 1: 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç (‡§¨‡§ø‡§®‡§æ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ö‡•á‡§ï ‡§ï‡•á) ---
    // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ '/seller-apply' ‡§™‡§∞ ‡§π‡•à ‡§î‡§∞ 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§∏‡•á‡§≤‡§∞ ‡§´‡§º‡•ç‡§≤‡•ã ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§
    // ‡§π‡§Æ ‡§Æ‡§æ‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§Ø‡§π‡§æ‡§Ç ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó-‡§á‡§® ‡§π‡•à‡•§
    if (intent === "become-seller" && location.startsWith("/seller-apply")) {
      console.log("AuthRedirectGuard: 'become-seller' intent found on /seller-apply. Handling directly.");
      localStorage.removeItem('redirectIntent'); // ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•ã ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç

      const approvalStatus = user?.seller?.approvalStatus;
      let sellerTargetPath: string;

      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡§æ ‡§∞‡•ã‡§≤ 'seller' ‡§π‡•à
      if (user?.role === "seller") {
        if (approvalStatus === "approved") {
          sellerTargetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          sellerTargetPath = "/seller-status";
        } else { // seller ‡§∞‡•ã‡§≤ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Ø‡§æ approved/pending ‡§®‡§π‡•Ä‡§Ç
          sellerTargetPath = "/seller-apply"; // ‡§µ‡§æ‡§™‡§∏ seller-apply ‡§™‡§∞ ‡§π‡•Ä ‡§∞‡§ñ‡•á‡§Ç
        }
      } else {
        // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ 'seller' ‡§∞‡•ã‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á 'seller-apply' ‡§™‡§∞ ‡§π‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§
        // ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡•á ‡§µ‡§π seller ‡§¨‡§®‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
        sellerTargetPath = "/seller-apply"; 
      }
      
      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§∏‡§π‡•Ä ‡§∏‡•á‡§≤‡§∞ ‡§™‡§æ‡§• ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
      if (location !== sellerTargetPath && !location.startsWith(sellerTargetPath + '/')) {
        console.log(`AuthRedirectGuard: Redirecting to designated seller path: ${sellerTargetPath}`);
        navigate(sellerTargetPath);
        console.groupEnd();
        return;
      }
      console.log("AuthRedirectGuard: User already on correct seller intent path. Staying put.");
      console.groupEnd(); 
      return;
    }

    // --- ‡§Ö‡§¨ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§î‡§∞ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï (‡§ú‡§¨ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§® ‡§π‡•ã) ---

    // --- üîí ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ---
    if (!isAuthenticated) {
      console.log("AuthRedirectGuard: User not logged in (no 'become-seller' intent).");
      
      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä auth-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à (‡§ú‡•à‡§∏‡•á /auth, /login, /admin-login)
      if (isOnAuthSpecificPath) {
        console.log("AuthRedirectGuard: Not logged in user on auth-specific path. Staying put.");
        console.groupEnd();
        return; 
      }

      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à (‡§ú‡•à‡§∏‡•á /, /product, /cart)
      if (isOnPublicPath) {
        console.log("AuthRedirectGuard: Not logged in user on public path. Staying put.");
        console.groupEnd();
        return; 
      }

      // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§î‡§∞ ‡§® ‡§π‡•Ä ‡§ï‡§ø‡§∏‡•Ä auth-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ø‡§æ ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§• ‡§™‡§∞ ‡§π‡•à
      console.log("AuthRedirectGuard: Not logged in user on restricted non-public path. Redirecting to /auth.");
      navigate("/auth");
      console.groupEnd();
      return;
    }

    // --- üîì ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à (`isAuthenticated` ‡§Ö‡§¨ true ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ã‡§à 'become-seller' ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§•‡§æ) ---
    console.log(
      "AuthRedirectGuard: User is logged in (no 'become-seller' intent). Current role:",
      user?.role,
      "Approval Status:",
      user?.seller?.approvalStatus
    );

    // ‚úÖ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ 2: ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó‡§ø‡§® ‡§π‡•à ‡§î‡§∞ 'auth-specific' ‡§™‡•á‡§ú ‡§™‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§π‡•ã‡§Æ ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç
    if (isOnAuthSpecificPath) {
      console.log("AuthRedirectGuard: Logged in user on auth-specific page. Redirecting to /.");
      navigate("/");
      console.groupEnd();
      return;
    }

    // --- ‡§∞‡•ã‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï (‡§ï‡•á‡§µ‡§≤ ‡§ú‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•ã ‡§î‡§∞ auth/public ‡§™‡§æ‡§• ‡§™‡§∞ ‡§® ‡§π‡•ã ‡§î‡§∞ ‡§ï‡•ã‡§à ‡§á‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§® ‡§π‡•ã) ---
    let targetPath: string | null = null; 

    switch (user?.role) {
      case "seller": {
        const approvalStatus = user.seller?.approvalStatus;
        if (approvalStatus === "approved") {
          targetPath = "/seller-dashboard";
        } else if (approvalStatus === "pending") {
          targetPath = "/seller-status";
        } else {
          targetPath = "/seller-apply";
        }

        if (!location.startsWith("/seller-") && targetPath && location !== targetPath && !location.startsWith(targetPath + '/')) {
          console.log(`AuthRedirectGuard: Seller on non-seller path, redirecting to ${targetPath}`);
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;
      }

      case "admin":
        targetPath = "/admin-dashboard";
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Admin, redirecting to /admin-dashboard.");
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;

      case "delivery":
        targetPath = "/delivery-dashboard";
        if (!location.startsWith(targetPath)) {
          console.log("AuthRedirectGuard: Delivery, redirecting to /delivery-dashboard.");
          navigate(targetPath);
          console.groupEnd();
          return;
        }
        break;

      case "customer":
      default: 
        if (
          location.startsWith("/seller-") ||
          location.startsWith("/admin-") ||
          location.startsWith("/delivery-")
        ) {
          console.log("AuthRedirectGuard: Customer or unknown role on restricted page, redirecting to /.");
          navigate("/");
          console.groupEnd();
          return;
        }
        break; 
    }

    console.log("AuthRedirectGuard: Logged in user on appropriate path, staying put.");
    console.groupEnd();

  }, [user, isLoadingAuth, isAuthenticated, location, navigate, intent]); 

  return null; 
}
